const { ApolloServer, gql } = require("apollo-server");
const fs = require("fs");
const path = require("path");

const filePath = path.join(__dirname, "goods.json");

// ะงะธัะฐะตะผ ัะพะฒะฐัั ะธะท JSON-ัะฐะนะปะฐ
const getGoods = () => {
  try {
    const data = fs.readFileSync(filePath, "utf8");
    const goods = JSON.parse(data);
    return goods.map((product) => ({
      ...product,
    }));
  } catch (error) {
    console.error("ะัะธะฑะบะฐ ััะตะฝะธั ัะฐะนะปะฐ:", error);
    return [];
  }
};

// ะะฟัะตะดะตะปัะตะผ GraphQL-ััะตะผั
const typeDefs = gql`
  type Product {
    id: ID!
    name: String!
    description: String
    cost: Float!
    category: String
  }

  type Query {
    products(category: String): [Product]
  }
`;

// ะะฟัะตะดะตะปัะตะผ ัะตะทะพะปะฒะตัั
const resolvers = {
  Query: {
    products: (_, { category }) => {
      const goods = getGoods();
      return category
        ? goods.filter((product) => product.category === category)
        : goods;
    },
  },
};

// ะกะพะทะดะฐัะผ ัะตัะฒะตั Apollo
const server = new ApolloServer({ typeDefs, resolvers });

server.listen(3000).then(({ url }) => {
  console.log(`๐  GraphQL ัะตัะฒะตั ะทะฐะฟััะตะฝ ะฝะฐ ${url}`);
});
